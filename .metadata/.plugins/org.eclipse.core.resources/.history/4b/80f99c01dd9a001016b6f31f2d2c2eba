#include "system.h" // Provides the base address for our UART (e.g., JTAG_UART_0_BASE)
#include "io.h"     // Provides the low-level IOWR/IORD macros for hardware access

// This header contains the definitions for the UART's internal register offsets and bit masks.
// Because this is a standard Altera IP, this file SHOULD be found by the compiler.
#include "altera_avalon_jtag_uart_regs.h"

int main()
{
  // --- Print a startup message directly to the hardware, character by character ---
  char* msg = "INFO: NIOS II Direct HW Echo Running.\n";
  while (*msg) {
    // The JTAG UART has a control register that tells us how much space is in its transmit buffer.
    // This loop waits until the WSPACE (write space) field is greater than zero.
    while ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_BASE) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) == 0);

    // IOWR (I/O Write) is a low-level macro that writes a value directly to a hardware address.
    // We are writing the character to the UART's 'data' register.
    IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE, *msg++);
  }


  unsigned int received_word;

  // --- Main echo loop ---
  while (1)
  {
    // IORD (I/O Read) reads a value directly from a hardware address.
    // We are reading from the UART's 'data' register.
    received_word = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE);

    // The data we read is not just the character. The upper 16 bits contain status flags.
    // Bit 15 is the RVALID (Read Valid) flag. We must check this flag to see if new data has actually arrived.
    if (received_word & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) {

      // If the data is valid, the actual character is in the lower 8 bits.
      // We use a bitmask to extract just the character data.
      unsigned char char_to_echo = received_word & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK;

      // Wait for space in the transmit buffer again...
      while ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_BASE) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) == 0);

      // ...and write the character we extracted straight back out.
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE, char_to_echo);
    }
  }

  return 0;
}

