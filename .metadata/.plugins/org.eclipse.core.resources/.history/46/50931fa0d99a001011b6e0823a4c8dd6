#include "system.h" // Provides the base address for our UART
#include "altera_avalon_jtag_uart_regs.h" // Provides the register macros
#include "io.h"     // Provides the IOWR/IORD macros for direct hardware access

int main()
{
  // A simple way to print the startup string without printf or alt_putstr
  char* msg = "INFO: NIOS II Direct HW Echo Running.\n";
  while (*msg) {
    // IOWR_ALTERA_AVALON_JTAG_UART_DATA is a macro that writes directly
    // to the JTAG UART's data register.
    // We wait until the transmit FIFO has space before writing.
    while ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_0_BASE) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) == 0);
    IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE, *msg++);
  }

  unsigned int received_char;

  while (1)
  {
    // IORD_ALTERA_AVALON_JTAG_UART_DATA reads directly from the data register.
    // It returns -1 if no data is available, so we loop until we get something.
    received_char = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE);

    // Check if the read was valid (bit 15 is the RVALID flag)
    if (received_char & 0x8000) {
      // If valid, write the lower 8 bits of the data straight back.
      while ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_0_BASE) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) == 0);
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_0_BASE, received_char & 0xFF);
    }
  }

  return 0;
}
